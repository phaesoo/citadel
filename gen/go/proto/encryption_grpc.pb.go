// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EncryptionClient is the client API for Encryption service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncryptionClient interface {
	Encrypt(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error)
	Decrypt(ctx context.Context, in *DecryptionRequest, opts ...grpc.CallOption) (*DecryptionResponse, error)
}

type encryptionClient struct {
	cc grpc.ClientConnInterface
}

func NewEncryptionClient(cc grpc.ClientConnInterface) EncryptionClient {
	return &encryptionClient{cc}
}

func (c *encryptionClient) Encrypt(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error) {
	out := new(EncryptionResponse)
	err := c.cc.Invoke(ctx, "/keybox.Encryption/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionClient) Decrypt(ctx context.Context, in *DecryptionRequest, opts ...grpc.CallOption) (*DecryptionResponse, error) {
	out := new(DecryptionResponse)
	err := c.cc.Invoke(ctx, "/keybox.Encryption/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncryptionServer is the server API for Encryption service.
// All implementations must embed UnimplementedEncryptionServer
// for forward compatibility
type EncryptionServer interface {
	Encrypt(context.Context, *EncryptionRequest) (*EncryptionResponse, error)
	Decrypt(context.Context, *DecryptionRequest) (*DecryptionResponse, error)
	mustEmbedUnimplementedEncryptionServer()
}

// UnimplementedEncryptionServer must be embedded to have forward compatible implementations.
type UnimplementedEncryptionServer struct {
}

func (UnimplementedEncryptionServer) Encrypt(context.Context, *EncryptionRequest) (*EncryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (UnimplementedEncryptionServer) Decrypt(context.Context, *DecryptionRequest) (*DecryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedEncryptionServer) mustEmbedUnimplementedEncryptionServer() {}

// UnsafeEncryptionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncryptionServer will
// result in compilation errors.
type UnsafeEncryptionServer interface {
	mustEmbedUnimplementedEncryptionServer()
}

func RegisterEncryptionServer(s grpc.ServiceRegistrar, srv EncryptionServer) {
	s.RegisterService(&Encryption_ServiceDesc, srv)
}

func _Encryption_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keybox.Encryption/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServer).Encrypt(ctx, req.(*EncryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encryption_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keybox.Encryption/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServer).Decrypt(ctx, req.(*DecryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Encryption_ServiceDesc is the grpc.ServiceDesc for Encryption service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Encryption_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keybox.Encryption",
	HandlerType: (*EncryptionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encrypt",
			Handler:    _Encryption_Encrypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _Encryption_Decrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/encryption.proto",
}
