// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EncryptClient is the client API for Encrypt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncryptClient interface {
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptReply, error)
	Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptReply, error)
}

type encryptClient struct {
	cc grpc.ClientConnInterface
}

func NewEncryptClient(cc grpc.ClientConnInterface) EncryptClient {
	return &encryptClient{cc}
}

func (c *encryptClient) Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptReply, error) {
	out := new(EncryptReply)
	err := c.cc.Invoke(ctx, "/keybox.Encrypt/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptClient) Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptReply, error) {
	out := new(DecryptReply)
	err := c.cc.Invoke(ctx, "/keybox.Encrypt/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncryptServer is the server API for Encrypt service.
// All implementations must embed UnimplementedEncryptServer
// for forward compatibility
type EncryptServer interface {
	Encrypt(context.Context, *EncryptRequest) (*EncryptReply, error)
	Decrypt(context.Context, *DecryptRequest) (*DecryptReply, error)
	mustEmbedUnimplementedEncryptServer()
}

// UnimplementedEncryptServer must be embedded to have forward compatible implementations.
type UnimplementedEncryptServer struct {
}

func (UnimplementedEncryptServer) Encrypt(context.Context, *EncryptRequest) (*EncryptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (UnimplementedEncryptServer) Decrypt(context.Context, *DecryptRequest) (*DecryptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedEncryptServer) mustEmbedUnimplementedEncryptServer() {}

// UnsafeEncryptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncryptServer will
// result in compilation errors.
type UnsafeEncryptServer interface {
	mustEmbedUnimplementedEncryptServer()
}

func RegisterEncryptServer(s grpc.ServiceRegistrar, srv EncryptServer) {
	s.RegisterService(&Encrypt_ServiceDesc, srv)
}

func _Encrypt_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keybox.Encrypt/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptServer).Encrypt(ctx, req.(*EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encrypt_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keybox.Encrypt/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptServer).Decrypt(ctx, req.(*DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Encrypt_ServiceDesc is the grpc.ServiceDesc for Encrypt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Encrypt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keybox.Encrypt",
	HandlerType: (*EncryptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encrypt",
			Handler:    _Encrypt_Encrypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _Encrypt_Decrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/encrypt.proto",
}
